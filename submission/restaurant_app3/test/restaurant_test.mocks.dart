// Mocks generated by Mockito 5.0.14 from annotations
// in restaurant_app3/test/restaurant_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;
import 'dart:ui' as _i9;

import 'package:mockito/mockito.dart' as _i1;
import 'package:restaurant_app3/data/api/api_service.dart' as _i2;
import 'package:restaurant_app3/data/model/detail_restaurant.dart' as _i3;
import 'package:restaurant_app3/data/model/restaurant.dart' as _i4;
import 'package:restaurant_app3/data/model/reviews.dart' as _i6;
import 'package:restaurant_app3/data/model/search_restaurant.dart' as _i5;
import 'package:restaurant_app3/provider/restaurants_provider.dart' as _i7;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeApiService_0 extends _i1.Fake implements _i2.ApiService {}

class _FakeDetailsResult_1 extends _i1.Fake implements _i3.DetailsResult {}

class _FakeRestaurantsResult_2 extends _i1.Fake
    implements _i4.RestaurantsResult {}

class _FakeSearchResult_3 extends _i1.Fake implements _i5.SearchResult {}

class _FakeReviewsResult_4 extends _i1.Fake implements _i6.ReviewsResult {}

/// A class which mocks [RestaurantsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantsProvider extends _i1.Mock
    implements _i7.RestaurantsProvider {
  MockRestaurantsProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApiService get apiService =>
      (super.noSuchMethod(Invocation.getter(#apiService),
          returnValue: _FakeApiService_0()) as _i2.ApiService);
  @override
  set apiService(_i2.ApiService? _apiService) =>
      super.noSuchMethod(Invocation.setter(#apiService, _apiService),
          returnValueForMissingStub: null);
  @override
  String get type =>
      (super.noSuchMethod(Invocation.getter(#type), returnValue: '') as String);
  @override
  set type(String? _type) => super.noSuchMethod(Invocation.setter(#type, _type),
      returnValueForMissingStub: null);
  @override
  set restaurant(_i4.Restaurant? _restaurant) =>
      super.noSuchMethod(Invocation.setter(#restaurant, _restaurant),
          returnValueForMissingStub: null);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
  @override
  _i3.DetailsResult get detailResult =>
      (super.noSuchMethod(Invocation.getter(#detailResult),
          returnValue: _FakeDetailsResult_1()) as _i3.DetailsResult);
  @override
  _i7.ResultState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _i7.ResultState.Loading) as _i7.ResultState);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i8.Future<dynamic> fetchAllRestaurant() =>
      (super.noSuchMethod(Invocation.method(#fetchAllRestaurant, []),
          returnValue: Future<dynamic>.value()) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> fetchDetailofRestaurant(String? id) =>
      (super.noSuchMethod(Invocation.method(#fetchDetailofRestaurant, [id]),
          returnValue: Future<dynamic>.value()) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> fetchSearchRestaurant(String? query) =>
      (super.noSuchMethod(Invocation.method(#fetchSearchRestaurant, [query]),
          returnValue: Future<dynamic>.value()) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> postReview(_i6.Review? review) =>
      (super.noSuchMethod(Invocation.method(#postReview, [review]),
          returnValue: Future<dynamic>.value()) as _i8.Future<dynamic>);
  @override
  void addListener(_i9.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i9.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i2.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.RestaurantsResult> fetchRestaurants() => (super.noSuchMethod(
          Invocation.method(#fetchRestaurants, []),
          returnValue:
              Future<_i4.RestaurantsResult>.value(_FakeRestaurantsResult_2()))
      as _i8.Future<_i4.RestaurantsResult>);
  @override
  _i8.Future<_i3.DetailsResult> fetchDetails(String? id) => (super.noSuchMethod(
          Invocation.method(#fetchDetails, [id]),
          returnValue: Future<_i3.DetailsResult>.value(_FakeDetailsResult_1()))
      as _i8.Future<_i3.DetailsResult>);
  @override
  _i8.Future<_i5.SearchResult> fetchSearch(String? query) =>
      (super.noSuchMethod(Invocation.method(#fetchSearch, [query]),
              returnValue:
                  Future<_i5.SearchResult>.value(_FakeSearchResult_3()))
          as _i8.Future<_i5.SearchResult>);
  @override
  _i8.Future<_i6.ReviewsResult> postReview(_i6.Review? review) =>
      (super.noSuchMethod(Invocation.method(#postReview, [review]),
              returnValue:
                  Future<_i6.ReviewsResult>.value(_FakeReviewsResult_4()))
          as _i8.Future<_i6.ReviewsResult>);
  @override
  String toString() => super.toString();
}
